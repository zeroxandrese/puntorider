generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_CNN")
}

enum Profile {
  DRIVER
  SUPERUSER
  ADMIN
}

model UsersClient {
  uid                 String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String   @default("Aliado")
  numberPhone         String?  @default("0")
  hashValidationPhone String?
  email               String?  @default("default@example.com")
  hashValidationEmail String?
  status              Boolean  @default(true)
  google              Boolean  @default(false)
  img                 String?
  googleUserId        String?
  referralCode        String?
  created             DateTime @default(now())

  userLevels            UserLevel[]           @relation("UserClientLevels")
  commentsClient        CommentsClient[]      @relation("UserClientComment")
  trip                  Trip[]                @relation("UserClientTrip")
  discountCode          DiscountCode[]        @relation("UserClientCode")
  favoritePlace         FavoritePlace[]       @relation("UserClientFavoritePlace")
  scheduledTrip         ScheduledTrip[]       @relation("UserClientScheduledTrip")
  reportClient          ReportClient[]        @relation("UserClientReport")
  historyTripsClient    HistoryTripsClient[]  @relation("UserClientHistoryTrip")
  paymentMethod         PaymentMethod[]       @relation("UserClientPaymentMethod")
  notifications         NotificationsClient[] @relation("UserClientNotification")
  calculateTrip         CalculateTrip[]       @relation("CalculateUserTrip")
  referredCodeReference ReferredCodeUsed[]    @relation("UserClientReferenceCode")
  referredCodeEnable    ReferredCodeEnable[]  @relation("UserClientReferredCodeEnable")
  referredCodeSender    ReferredCodeUsed[]    @relation("UserClientSenderCodeRef")
  shipmentItem          ShipmentItem[]        @relation("UserClientShipmentItem")
  ContactUs             ContactUs[]           @relation("UserClientContacUs")
  clientsSurveys        ClientsSurveys[]      @relation("UserClientIDSurveys")
  tokenNotification     TokenNotification[]   @relation("UserClientTokenNotification")

  @@map("usersClient")
}

model UserLevel {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersClientId String      @db.ObjectId
  usersClient   UsersClient @relation("UserClientLevels", fields: [usersClientId], references: [uid])
  tripsCount    Int         @default(0)
  driverScore   Float       @default(0)
  level         String      @default("Bronce")
  updatedAt     DateTime    @updatedAt

  @@index([usersClientId])
  @@map("userLevels")
}

model UsersDriver {
  uid                 String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String   @default("Aliado")
  lastName            String?
  hashValidationEmail String?
  email               String
  numberPhone         String?  @default("0")
  hashValidationPhone String?
  password            String
  vehicleType         String?
  status              Boolean  @default(true)
  google              Boolean  @default(false)
  img                 String?
  profile             Profile  @default(DRIVER)
  created             DateTime @default(now())

  driverLevels          DriversLevel[]          @relation("UserDriverLevels")
  vehicle               Vehicles[]              @relation("VehicleDriver")
  commentsDriver        CommentsDriver[]        @relation("UserDriverComment")
  trip                  Trip[]                  @relation("UserDriverTrip")
  reportDriver          ReportDriver[]          @relation("UserDriverReport")
  historyTripsDriver    HistoryTripsDriver[]    @relation("UserDriverHistoryTrip")
  notifications         NotificationsDriver[]   @relation("UserDriverNotification")
  shipment              Shipment[]              @relation("UserDriverShipment")
  rejectedTripForDriver RejectedTripForDriver[] @relation("TripCancelDriverID")
  driversSurveys        DriversSurveys[]        @relation("DriversSurveysDriverID")
  contactUsDriver       ContactUsDriver[]       @relation("UserDriverContacUsDriver")

  @@map("usersDriver")
}

model DriversLevel {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersDriverId String      @db.ObjectId
  usersDriver   UsersDriver @relation("UserDriverLevels", fields: [usersDriverId], references: [uid])
  tripsCount    Int         @default(0)
  clientScore   Float       @default(0)
  level         String      @default("Bronce")
  updatedAt     DateTime    @updatedAt

  @@index([usersDriverId])
  @@map("driversLevels")
}

model Vehicles {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersDriverId String      @db.ObjectId
  usersDriver   UsersDriver @relation("VehicleDriver", fields: [usersDriverId], references: [uid])
  register      String?
  model         String
  brand         String
  year          Int         @default(0)
  color         String
  cargo         Boolean?    @default(false)
  shipment      Boolean?    @default(false)
  status        Boolean?    @default(true)

  @@index([usersDriverId])
  @@map("vehicles")
}

model CommentsClient {
  uid     String      @id @default(auto()) @map("_id") @db.ObjectId
  usersId String      @db.ObjectId
  users   UsersClient @relation("UserClientComment", fields: [usersId], references: [uid])
  tripId  String      @db.ObjectId
  trip    Trip        @relation("tripCommentClient", fields: [tripId], references: [uid])
  comment String
  status  Boolean     @default(true)
  created DateTime    @default(now())

  @@index([usersId])
  @@map("commentsClient")
}

model CommentsDriver {
  uid     String      @id @default(auto()) @map("_id") @db.ObjectId
  usersId String      @db.ObjectId
  users   UsersDriver @relation("UserDriverComment", fields: [usersId], references: [uid])
  tripId  String      @db.ObjectId
  trip    Trip        @relation("tripCommentDriver", fields: [tripId], references: [uid])
  comment String
  status  Boolean     @default(true)
  created DateTime    @default(now())

  @@index([usersId])
  @@map("commentsDriver")
}

model Trip {
  uid               String      @id @default(auto()) @map("_id") @db.ObjectId
  usersClientId     String      @db.ObjectId
  usersClient       UsersClient @relation("UserClientTrip", fields: [usersClientId], references: [uid])
  usersDriverId     String      @db.ObjectId
  usersDriver       UsersDriver @relation("UserDriverTrip", fields: [usersDriverId], references: [uid])
  complete          Boolean     @default(false)
  paid              Boolean     @default(false)
  price             Float       @default(0)
  offeredPrice      Float?
  priceWithDiscount Float?
  basePrice         Float       @default(0)
  paymentMethod     String
  kilometers        Float       @default(0)
  latitudeStart     Float       @default(0)
  longitudeStart    Float       @default(0)
  latitudeEnd       Float       @default(0)
  longitudeEnd      Float       @default(0)
  addressStart      String
  addressEnd        String
  hourStart         String
  hourEnd           String?
  estimatedArrival  String?
  discountCode      String?
  discountApplied   Boolean?    @default(false)
  driverArrived     Boolean?    @default(false)
  tripStarted       Boolean?    @default(false)
  vehicle           String
  status            Boolean     @default(true)
  created           DateTime    @default(now())
  cancelForUser     Boolean     @default(false)
  cancelForDriver   Boolean     @default(false)
  tripCalculateId   String

  commentsClient        CommentsClient[]        @relation("tripCommentClient")
  commentsDriver        CommentsDriver[]        @relation("tripCommentDriver")
  historyTripsClient    HistoryTripsClient[]    @relation("TripHistoryClient")
  historyTripsDriver    HistoryTripsDriver[]    @relation("TripHistoryDriver")
  rejectedTripForDriver RejectedTripForDriver[] @relation("TripIDCancelForDriver")
  driversSurveys        DriversSurveys[]        @relation("TripIDDriversSurveys")
  clientsSurveys        ClientsSurveys[]        @relation("TripIDClientsSurveys")

  @@index([usersDriverId, usersClientId])
  @@map("trip")
}

model DiscountCode {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersClientId String      @db.ObjectId
  usersClient   UsersClient @relation("UserClientCode", fields: [usersClientId], references: [uid])
  code          String
  percentage    Int
  description   String?
  expiryDate    DateTime    @default(now())
  status        Boolean     @default(true)
  created       DateTime    @default(now())

  @@index([usersClientId, code])
  @@map("discountCode")
}

model EnableCode {
  uid         String   @id @default(auto()) @map("_id") @db.ObjectId
  code        String
  enableLevel String
  status      Boolean  @default(true)
  created     DateTime @default(now())

  @@map("enbaleCode")
}

model FavoritePlace {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersClientId String      @db.ObjectId
  usersClient   UsersClient @relation("UserClientFavoritePlace", fields: [usersClientId], references: [uid])
  latitude      Float       @default(0)
  longitude     Float       @default(0)
  address       String?
  status        Boolean     @default(true)
  created       DateTime    @default(now())

  @@index([usersClientId])
  @@map("favoritePlace")
}

model ScheduledTrip {
  uid                String      @id @default(auto()) @map("_id") @db.ObjectId
  usersClientId      String      @db.ObjectId
  usersClient        UsersClient @relation("UserClientScheduledTrip", fields: [usersClientId], references: [uid])
  price              Float       @default(0)
  offeredPrice       Float?
  basePrice          Float       @default(0)
  paymentMethod      String
  kilometers         Float       @default(0)
  latitudeStart      Float       @default(0)
  longitudeStart     Float       @default(0)
  latitudeEnd        Float       @default(0)
  longitudeEnd       Float       @default(0)
  addressStart       String
  addressEnd         String
  dateScheduled      DateTime
  hourScheduledStart String
  hourScheduledEnd   String?
  estimatedArrival   String?
  discountCode       String?
  discountApplied    Boolean?    @default(false)
  cancelForUser      Boolean     @default(false)
  status             Boolean     @default(true)
  created            DateTime    @default(now())

  @@index([usersClientId])
  @@map("scheduledTrip")
}

model ReportClient {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersClientId String      @db.ObjectId
  usersClient   UsersClient @relation("UserClientReport", fields: [usersClientId], references: [uid])
  comment       String
  status        Boolean     @default(true)
  created       DateTime    @default(now())

  @@index([usersClientId])
  @@map("reportClient")
}

model ReportDriver {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersDriverId String      @db.ObjectId
  usersDriver   UsersDriver @relation("UserDriverReport", fields: [usersDriverId], references: [uid])
  comment       String
  status        Boolean     @default(true)
  created       DateTime    @default(now())

  @@index([usersDriverId])
  @@map("reportDriver")
}

model HistoryTripsClient {
  uid             String      @id @default(auto()) @map("_id") @db.ObjectId
  tripId          String      @db.ObjectId
  trip            Trip        @relation("TripHistoryClient", fields: [tripId], references: [uid])
  usersClientId   String      @db.ObjectId
  usersClient     UsersClient @relation("UserClientHistoryTrip", fields: [usersClientId], references: [uid])
  complete        Boolean     @default(true)
  paid            Boolean     @default(true)
  price           Float       @default(0)
  offeredPrice    Float?
  basePrice       Float       @default(0)
  paymentMethod   String
  kilometers      Float       @default(0)
  latitudeStart   Float       @default(0)
  longitudeStart  Float       @default(0)
  latitudeEnd     Float       @default(0)
  longitudeEnd    Float       @default(0)
  addressStart    String
  addressEnd      String
  hourStart       String
  hourEnd         String?
  discountCode    String?
  discountApplied Boolean?    @default(false)
  vehicle         String
  cancelForUser   Boolean     @default(false)
  created         DateTime    @default(now())

  @@index([usersClientId, tripId])
  @@map("historyTripsClient")
}

model HistoryTripsDriver {
  uid             String      @id @default(auto()) @map("_id") @db.ObjectId
  tripId          String      @db.ObjectId
  trip            Trip        @relation("TripHistoryDriver", fields: [tripId], references: [uid])
  usersDriverId   String      @db.ObjectId
  usersDriver     UsersDriver @relation("UserDriverHistoryTrip", fields: [usersDriverId], references: [uid])
  complete        Boolean     @default(true)
  paid            Boolean     @default(true)
  price           Float       @default(0)
  offeredPrice    Float?
  basePrice       Float       @default(0)
  paymentMethod   String
  kilometers      Float       @default(0)
  latitudeStart   Float       @default(0)
  longitudeStart  Float       @default(0)
  latitudeEnd     Float       @default(0)
  longitudeEnd    Float       @default(0)
  addressStart    String
  addressEnd      String
  hourStart       String
  hourEnd         String
  discountCode    String?
  discountApplied Boolean?    @default(false)
  vehicle         String
  created         DateTime    @default(now())

  @@index([usersDriverId, tripId])
  @@map("historyTripsDriver")
}

model PaymentMethod {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersClientId String      @db.ObjectId
  usersClient   UsersClient @relation("UserClientPaymentMethod", fields: [usersClientId], references: [uid])
  cardToken     String
  last4Digits   String
  updatedAt     DateTime    @updatedAt
  status        Boolean     @default(true)
  created       DateTime    @default(now())

  @@index([usersClientId])
  @@map("paymentMethod")
}

model NotificationsClient {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersClientId String      @db.ObjectId
  usersClient   UsersClient @relation("UserClientNotification", fields: [usersClientId], references: [uid])
  notification  String
  status        Boolean     @default(true)
  created       DateTime    @default(now())

  @@index([usersClientId])
  @@map("notificationsClient")
}

model NotificationsDriver {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersDriverId String      @db.ObjectId
  usersDriver   UsersDriver @relation("UserDriverNotification", fields: [usersDriverId], references: [uid])
  notification  String
  status        Boolean     @default(true)
  created       DateTime    @default(now())

  @@index([usersDriverId])
  @@map("notificationsDriver")
}

model Shipment {
  uid               String      @id @default(auto()) @map("_id") @db.ObjectId
  usersDriverId     String      @db.ObjectId
  usersDriver       UsersDriver @relation("UserDriverShipment", fields: [usersDriverId], references: [uid])
  shipmentNumber    String      @default(uuid())
  statusDelivery    String      @default("Pending")
  deliveryAddress   String?
  pickupAddress     String?
  estimatedDelivery String?
  estimatedArrival  String
  hourEnd           String?
  note              String?
  status            Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  items           ShipmentItem[]
  ShipmentHistory ShipmentHistory[] @relation("Shipment")

  @@index([usersDriverId])
  @@map("shipments")
}

model ShipmentItem {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  shipmentId    String      @db.ObjectId
  shipment      Shipment    @relation(fields: [shipmentId], references: [uid])
  usersClientId String      @db.ObjectId
  usersClient   UsersClient @relation("UserClientShipmentItem", fields: [usersClientId], references: [uid])
  description   String
  quantity      Int
  weight        Float
  dimensions    String?
  note          String?

  @@index([shipmentId])
  @@map("shipmentItems")
}

model ShipmentHistory {
  uid             String   @id @default(auto()) @map("_id") @db.ObjectId
  shipmentId      String   @db.ObjectId
  shipment        Shipment @relation("Shipment", fields: [shipmentId], references: [uid])
  statusDelivery  String?
  deliveryAddress String?
  pickupAddress   String?
  shipmentNumber  String?
  hourEnd         String
  updatedAt       DateTime @default(now())
  note            String?

  @@index([shipmentId])
  @@map("shipmentHistories")
}

model CalculateTrip {
  uid                String      @id @default(auto()) @map("_id") @db.ObjectId
  usersClientId      String      @db.ObjectId
  usersClient        UsersClient @relation("CalculateUserTrip", fields: [usersClientId], references: [uid])
  price              Float       @default(0)
  offeredPrice       Float?
  priceWithDiscount  Float?
  basePrice          Float       @default(0)
  paymentMethod      String
  kilometers         Float       @default(0)
  latitudeStart      Float       @default(0)
  longitudeStart     Float       @default(0)
  latitudeEnd        Float       @default(0)
  longitudeEnd       Float       @default(0)
  addressStart       String
  addressEnd         String
  dateScheduled      DateTime
  hourScheduledStart String
  hourScheduledEnd   String?
  estimatedArrival   String?
  scheduledStatus    Boolean     @default(false)
  discountCode       String?
  discountApplied    Boolean?    @default(false)
  vehicle            String
  status             Boolean     @default(true)
  created            DateTime    @default(now())
  cancelForUser      Boolean     @default(false)

  @@index([usersClientId])
  @@map("calculateTrip")
}

model ReferredCodeUsed {
  uid                     String      @id @default(auto()) @map("_id") @db.ObjectId
  usersClientId           String      @db.ObjectId
  usersClient             UsersClient @relation("UserClientSenderCodeRef", fields: [usersClientId], references: [uid])
  usersClientReferencedId String      @db.ObjectId
  usersClientReferenced   UsersClient @relation("UserClientReferenceCode", fields: [usersClientReferencedId], references: [uid])
  referralCode            String
  status                  Boolean     @default(true)
  created                 DateTime    @default(now())

  @@index([usersClientId, usersClientReferencedId])
  @@map("referredCodeUsed")
}

model ReferredCodeEnable {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersClientId String      @db.ObjectId
  usersClient   UsersClient @relation("UserClientReferredCodeEnable", fields: [usersClientId], references: [uid])
  code          String
  status        Boolean     @default(true)
  created       DateTime    @default(now())

  @@index([usersClientId])
  @@map("referredCodeEnable")
}

model ValidationCodeSMS {
  uid                 String   @id @default(auto()) @map("_id") @db.ObjectId
  code                String
  codeSecurity        String
  numberPhone         String   @default("0")
  hashValitadionPhone String   @default("0")
  status              Boolean  @default(true)
  created             DateTime @default(now())

  @@index([code, codeSecurity])
  @@map("validationCodeSMS")
}

model PriceBaseTrip {
  uid     String   @id @default(auto()) @map("_id") @db.ObjectId
  price   Float    @default(0.6)
  vehicle String
  status  Boolean  @default(true)
  created DateTime @default(now())

  @@index([status])
  @@map("priceBaseTrip")
}

model ContactUs {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersClientId String      @db.ObjectId
  usersClient   UsersClient @relation("UserClientContacUs", fields: [usersClientId], references: [uid])
  comment       String
  status        Boolean     @default(true)
  created       DateTime    @default(now())

  @@index([status])
  @@map("contactUs")
}

model ContactUsDriver {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersDriverId String      @db.ObjectId
  usersDriver   UsersDriver @relation("UserDriverContacUsDriver", fields: [usersDriverId], references: [uid])
  comment       String
  status        Boolean     @default(true)
  created       DateTime    @default(now())

  @@index([status])
  @@map("contactUsDriver")
}

model RejectedTripForDriver {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersDriverId String      @db.ObjectId
  usersDriver   UsersDriver @relation("TripCancelDriverID", fields: [usersDriverId], references: [uid])
  tripId        String      @db.ObjectId
  trip          Trip        @relation("TripIDCancelForDriver", fields: [tripId], references: [uid])
  status        Boolean     @default(true)
  created       DateTime    @default(now())

  @@index([status])
  @@map("rejectedTripForDriver")
}

model DriversSurveys {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersDriverId String      @db.ObjectId
  usersDriver   UsersDriver @relation("DriversSurveysDriverID", fields: [usersDriverId], references: [uid])
  tripId        String      @db.ObjectId
  trip          Trip        @relation("TripIDDriversSurveys", fields: [tripId], references: [uid])
  feedback      String?
  score         Float       @default(0)
  status        Boolean     @default(true)
  created       DateTime    @default(now())

  @@index([usersDriverId, tripId])
  @@map("driversSurveys")
}

model ClientsSurveys {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersClientId String      @db.ObjectId
  usersClient   UsersClient @relation("UserClientIDSurveys", fields: [usersClientId], references: [uid])
  tripId        String      @db.ObjectId
  trip          Trip        @relation("TripIDClientsSurveys", fields: [tripId], references: [uid])
  feedback      String?
  score         Float       @default(0)
  status        Boolean     @default(true)
  created       DateTime    @default(now())

  @@index([usersClientId, tripId])
  @@map("clientsSurveys")
}

model TokenNotification {
  uid           String      @id @default(auto()) @map("_id") @db.ObjectId
  usersClientId String      @db.ObjectId
  usersClient   UsersClient @relation("UserClientTokenNotification", fields: [usersClientId], references: [uid])
  fcmToken      String
  status        Boolean     @default(true)
  created       DateTime    @default(now())

  @@index([usersClientId])
  @@map("tokenNotification")
}

model CodeRegisterDriver {
  uid     String   @id @default(auto()) @map("_id") @db.ObjectId
  code    String
  status  Boolean  @default(true)
  created DateTime @default(now())

  @@map("codeRegisterDriver")
}
